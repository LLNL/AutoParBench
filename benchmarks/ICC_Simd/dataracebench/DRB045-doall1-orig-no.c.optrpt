Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.

Intel(R) C Intel(R) 64 Compiler for applications running on Intel(R) 64, Version 19.0.4.243 Build 20190416

Compiler options: -c -qopenmp -par-threshold0 -vec-threshold0 -fno-inline -parallel -qopt-report-phase=all -qopt-report=5 -o /home/gleison/Desktop/AutoParBench/benchmarks/ICC_Simd/dataracebench/DRB045-doall1-orig-no.o

    Report from: Interprocedural optimizations [ipo]

  WHOLE PROGRAM (SAFE) [EITHER METHOD]: false
  WHOLE PROGRAM (SEEN) [TABLE METHOD]: false
  WHOLE PROGRAM (READ) [OBJECT READER METHOD]: false

INLINING OPTION VALUES:
  -inline-factor: 100
  -inline-min-size: 30
  -inline-max-size: 230
  -inline-max-total-size: 2000
  -inline-max-per-routine: 10000
  -inline-max-per-compile: 500000

In the inlining report below:
   "sz" refers to the "size" of the routine. The smaller a routine's size,
      the more likely it is to be inlined.
   "isz" refers to the "inlined size" of the routine. This is the amount
      the calling routine will grow if the called routine is inlined into it.
      The compiler generally limits the amount a routine can grow by having
      routines inlined into it.

Begin optimization report for: main()

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (main()) [1/1=100.0%] /home/gleison/Desktop/AutoParBench/benchmarks/ICC_Simd/dataracebench/DRB045-doall1-orig-no.c(53,1)
  -> EXTERN: (62,5) printf(const char *__restrict__, ...)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /home/gleison/Desktop/AutoParBench/benchmarks/ICC_Simd/dataracebench/DRB045-doall1-orig-no.c(55,3)
   remark #17109: LOOP WAS AUTO-PARALLELIZED
   remark #17101: parallel loop shared={ } private={ } firstprivate={ i } lastprivate={ } firstlastprivate={ } reduction={ }
   remark #15388: vectorization support: reference a[i] has aligned access   [ /home/gleison/Desktop/AutoParBench/benchmarks/ICC_Simd/dataracebench/DRB045-doall1-orig-no.c(56,5) ]
   remark #15305: vectorization support: vector length 4
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 2 
   remark #15477: vector cost: 0.750 
   remark #15478: estimated potential speedup: 2.660 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=25
LOOP END

LOOP BEGIN at /home/gleison/Desktop/AutoParBench/benchmarks/ICC_Simd/dataracebench/DRB045-doall1-orig-no.c(58,3)
   remark #17109: LOOP WAS AUTO-PARALLELIZED
   remark #17101: parallel loop shared={ } private={ } firstprivate={ i } lastprivate={ } firstlastprivate={ } reduction={ }
   remark #15388: vectorization support: reference a[i] has aligned access   [ /home/gleison/Desktop/AutoParBench/benchmarks/ICC_Simd/dataracebench/DRB045-doall1-orig-no.c(59,5) ]
   remark #15388: vectorization support: reference a[i] has aligned access   [ /home/gleison/Desktop/AutoParBench/benchmarks/ICC_Simd/dataracebench/DRB045-doall1-orig-no.c(59,10) ]
   remark #15305: vectorization support: vector length 4
   remark #15300: LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 5 
   remark #15477: vector cost: 1.250 
   remark #15478: estimated potential speedup: 4.000 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=25
LOOP END

LOOP BEGIN at /home/gleison/Desktop/AutoParBench/benchmarks/ICC_Simd/dataracebench/DRB045-doall1-orig-no.c(61,3)
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15382: vectorization support: call to function printf(const char *__restrict__, ...) cannot be vectorized   [ /home/gleison/Desktop/AutoParBench/benchmarks/ICC_Simd/dataracebench/DRB045-doall1-orig-no.c(62,5) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
LOOP END

LOOP BEGIN at /home/gleison/Desktop/AutoParBench/benchmarks/ICC_Simd/dataracebench/DRB045-doall1-orig-no.c(55,3)
<Peeled loop for vectorization>
   remark #25015: Estimate of max trip count of loop=3
LOOP END

LOOP BEGIN at /home/gleison/Desktop/AutoParBench/benchmarks/ICC_Simd/dataracebench/DRB045-doall1-orig-no.c(55,3)
   remark #15388: vectorization support: reference a[i] has aligned access   [ /home/gleison/Desktop/AutoParBench/benchmarks/ICC_Simd/dataracebench/DRB045-doall1-orig-no.c(56,5) ]
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 3.333
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 2 
   remark #15477: vector cost: 0.750 
   remark #15478: estimated potential speedup: 2.220 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=25
LOOP END

LOOP BEGIN at /home/gleison/Desktop/AutoParBench/benchmarks/ICC_Simd/dataracebench/DRB045-doall1-orig-no.c(55,3)
<Remainder loop for vectorization>
   remark #25015: Estimate of max trip count of loop=100
LOOP END

LOOP BEGIN at /home/gleison/Desktop/AutoParBench/benchmarks/ICC_Simd/dataracebench/DRB045-doall1-orig-no.c(58,3)
<Peeled loop for vectorization>
   remark #25015: Estimate of max trip count of loop=3
LOOP END

LOOP BEGIN at /home/gleison/Desktop/AutoParBench/benchmarks/ICC_Simd/dataracebench/DRB045-doall1-orig-no.c(58,3)
   remark #15388: vectorization support: reference a[i] has aligned access   [ /home/gleison/Desktop/AutoParBench/benchmarks/ICC_Simd/dataracebench/DRB045-doall1-orig-no.c(59,5) ]
   remark #15388: vectorization support: reference a[i] has aligned access   [ /home/gleison/Desktop/AutoParBench/benchmarks/ICC_Simd/dataracebench/DRB045-doall1-orig-no.c(59,10) ]
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 2.000
   remark #15300: LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 5 
   remark #15477: vector cost: 1.250 
   remark #15478: estimated potential speedup: 3.330 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=25
LOOP END

LOOP BEGIN at /home/gleison/Desktop/AutoParBench/benchmarks/ICC_Simd/dataracebench/DRB045-doall1-orig-no.c(58,3)
<Remainder loop for vectorization>
   remark #25015: Estimate of max trip count of loop=100
LOOP END

    Report from: Code generation optimizations [cg]

/home/gleison/Desktop/AutoParBench/benchmarks/ICC_Simd/dataracebench/DRB045-doall1-orig-no.c(53,1):remark #34051: REGISTER ALLOCATION : [main] /home/gleison/Desktop/AutoParBench/benchmarks/ICC_Simd/dataracebench/DRB045-doall1-orig-no.c:53

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   16[ rax rdx rcx rbx rsi rdi r8-r10 r12-r13 zmm0-zmm4]
        
    Routine temporaries
        Total         :     179
            Global    :      44
            Local     :     135
        Regenerable   :      66
        Spilled       :       0
        
    Routine stack
        Variables     :      44 bytes*
            Reads     :       6 [4.00e+02 ~ 6.0%]
            Writes    :      12 [0.00e+00 ~ 0.0%]
        Spills        :      40 bytes*
            Reads     :      15 [5.00e+00 ~ 0.1%]
            Writes    :      15 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================
