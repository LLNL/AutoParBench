Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.

Intel(R) C Intel(R) 64 Compiler for applications running on Intel(R) 64, Version 19.0.4.243 Build 20190416

Compiler options: -c -qopenmp -par-threshold0 -vec-threshold0 -fno-inline -parallel -qopt-report-phase=all -qopt-report=5 -o /home/gleison/Desktop/AutoParBench/benchmarks/ICC_Simd/dataracebench/DRB050-functionparameter-orig-yes.o

    Report from: Interprocedural optimizations [ipo]

  WHOLE PROGRAM (SAFE) [EITHER METHOD]: false
  WHOLE PROGRAM (SEEN) [TABLE METHOD]: false
  WHOLE PROGRAM (READ) [OBJECT READER METHOD]: false

INLINING OPTION VALUES:
  -inline-factor: 100
  -inline-min-size: 30
  -inline-max-size: 230
  -inline-max-total-size: 2000
  -inline-max-per-routine: 10000
  -inline-max-per-compile: 500000

In the inlining report below:
   "sz" refers to the "size" of the routine. The smaller a routine's size,
      the more likely it is to be inlined.
   "isz" refers to the "inlined size" of the routine. This is the amount
      the calling routine will grow if the called routine is inlined into it.
      The compiler generally limits the amount a routine can grow by having
      routines inlined into it.

Begin optimization report for: foo1..0(double *, double *, int)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (foo1..0(double *, double *, int)) [1/3=33.3%] /home/gleison/Desktop/AutoParBench/benchmarks/ICC_Simd/dataracebench/DRB050-functionparameter-orig-yes.c(52,1)
  CLONED FROM: foo1(double *, double *, int)(X,X,100)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /home/gleison/Desktop/AutoParBench/benchmarks/ICC_Simd/dataracebench/DRB050-functionparameter-orig-yes.c(55,3)
<Peeled loop for vectorization, Multiversioned v1>
   remark #25015: Estimate of max trip count of loop=1
LOOP END

LOOP BEGIN at /home/gleison/Desktop/AutoParBench/benchmarks/ICC_Simd/dataracebench/DRB050-functionparameter-orig-yes.c(55,3)
<Multiversioned v1>
   remark #25228: Loop multiversioned for Data Dependence
   remark #17109: LOOP WAS AUTO-PARALLELIZED
   remark #17101: parallel loop shared={ } private={ } firstprivate={ c o1 i } lastprivate={ } firstlastprivate={ } reduction={ }
   remark #15388: vectorization support: reference o1[i] has aligned access   [ /home/gleison/Desktop/AutoParBench/benchmarks/ICC_Simd/dataracebench/DRB050-functionparameter-orig-yes.c(57,5) ]
   remark #15388: vectorization support: reference c[i] has aligned access   [ /home/gleison/Desktop/AutoParBench/benchmarks/ICC_Simd/dataracebench/DRB050-functionparameter-orig-yes.c(56,30) ]
   remark #15305: vectorization support: vector length 2
   remark #15399: vectorization support: unroll factor set to 4
   remark #15309: vectorization support: normalized vectorization overhead 0.583
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 7 
   remark #15477: vector cost: 3.000 
   remark #15478: estimated potential speedup: 2.120 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=12
LOOP END

LOOP BEGIN at /home/gleison/Desktop/AutoParBench/benchmarks/ICC_Simd/dataracebench/DRB050-functionparameter-orig-yes.c(55,3)
<Alternate Alignment Vectorized Loop, Multiversioned v1>
   remark #25015: Estimate of max trip count of loop=12
LOOP END

LOOP BEGIN at /home/gleison/Desktop/AutoParBench/benchmarks/ICC_Simd/dataracebench/DRB050-functionparameter-orig-yes.c(55,3)
<Remainder loop for vectorization, Multiversioned v1>
   remark #25015: Estimate of max trip count of loop=100
LOOP END

LOOP BEGIN at /home/gleison/Desktop/AutoParBench/benchmarks/ICC_Simd/dataracebench/DRB050-functionparameter-orig-yes.c(55,3)
<Multiversioned v2>
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #17106: parallel dependence: assumed FLOW dependence between o1[i] (57:5) and c[i] (57:5)
   remark #17106: parallel dependence: assumed ANTI dependence between c[i] (57:5) and o1[i] (57:5)
   remark #15304: loop was not vectorized: non-vectorizable loop instance from multiversioning
   remark #25438: unrolled without remainder by 2  
   remark #25015: Estimate of max trip count of loop=100
LOOP END

LOOP BEGIN at /home/gleison/Desktop/AutoParBench/benchmarks/ICC_Simd/dataracebench/DRB050-functionparameter-orig-yes.c(55,3)
<Peeled loop for vectorization, Multiversioned v1>
   remark #25015: Estimate of max trip count of loop=1
LOOP END

LOOP BEGIN at /home/gleison/Desktop/AutoParBench/benchmarks/ICC_Simd/dataracebench/DRB050-functionparameter-orig-yes.c(55,3)
<Multiversioned v1>
   remark #15388: vectorization support: reference o1[i] has aligned access   [ /home/gleison/Desktop/AutoParBench/benchmarks/ICC_Simd/dataracebench/DRB050-functionparameter-orig-yes.c(57,5) ]
   remark #15388: vectorization support: reference c[i] has aligned access   [ /home/gleison/Desktop/AutoParBench/benchmarks/ICC_Simd/dataracebench/DRB050-functionparameter-orig-yes.c(56,30) ]
   remark #15305: vectorization support: vector length 2
   remark #15399: vectorization support: unroll factor set to 4
   remark #15309: vectorization support: normalized vectorization overhead 0.583
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 7 
   remark #15477: vector cost: 3.000 
   remark #15478: estimated potential speedup: 2.120 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=12
LOOP END

LOOP BEGIN at /home/gleison/Desktop/AutoParBench/benchmarks/ICC_Simd/dataracebench/DRB050-functionparameter-orig-yes.c(55,3)
<Alternate Alignment Vectorized Loop, Multiversioned v1>
   remark #25015: Estimate of max trip count of loop=12
LOOP END

LOOP BEGIN at /home/gleison/Desktop/AutoParBench/benchmarks/ICC_Simd/dataracebench/DRB050-functionparameter-orig-yes.c(55,3)
<Remainder loop for vectorization, Multiversioned v1>
   remark #25015: Estimate of max trip count of loop=100
LOOP END

    Report from: Code generation optimizations [cg]

/home/gleison/Desktop/AutoParBench/benchmarks/ICC_Simd/dataracebench/DRB050-functionparameter-orig-yes.c(52,1):remark #34051: REGISTER ALLOCATION : [foo1..0] /home/gleison/Desktop/AutoParBench/benchmarks/ICC_Simd/dataracebench/DRB050-functionparameter-orig-yes.c:52

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   18[ rax rdx rcx rbx rbp rsi rdi r8-r9 r12-r15 zmm0-zmm4]
        
    Routine temporaries
        Total         :     159
            Global    :      37
            Local     :     122
        Regenerable   :      36
        Spilled       :       0
        
    Routine stack
        Variables     :      36 bytes*
            Reads     :       2 [5.00e+00 ~ 1.6%]
            Writes    :       7 [0.00e+00 ~ 0.0%]
        Spills        :      48 bytes*
            Reads     :      12 [6.00e+00 ~ 1.9%]
            Writes    :      12 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: main()

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (main()) [2/3=66.7%] /home/gleison/Desktop/AutoParBench/benchmarks/ICC_Simd/dataracebench/DRB050-functionparameter-orig-yes.c(62,1)
  -> CP_CLONE (72,3) foo1..0(double *, double *, int) (isz = 18) (sz = 27)
     [[ Unable to inline callsite  <1>]]
  -> EXTERN: (75,5) printf(const char *__restrict__, ...)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /home/gleison/Desktop/AutoParBench/benchmarks/ICC_Simd/dataracebench/DRB050-functionparameter-orig-yes.c(67,3)
   remark #17109: LOOP WAS AUTO-PARALLELIZED
   remark #17101: parallel loop shared={ c o1 } private={ } firstprivate={ i } lastprivate={ } firstlastprivate={ } reduction={ }
   remark #15388: vectorization support: reference c[i] has aligned access   [ /home/gleison/Desktop/AutoParBench/benchmarks/ICC_Simd/dataracebench/DRB050-functionparameter-orig-yes.c(68,5) ]
   remark #15388: vectorization support: reference o1[i] has aligned access   [ /home/gleison/Desktop/AutoParBench/benchmarks/ICC_Simd/dataracebench/DRB050-functionparameter-orig-yes.c(69,5) ]
   remark #15305: vectorization support: vector length 2
   remark #15399: vectorization support: unroll factor set to 4
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 2 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 13 
   remark #15477: vector cost: 6.000 
   remark #15478: estimated potential speedup: 2.070 
   remark #15487: type converts: 2 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=12
LOOP END

LOOP BEGIN at /home/gleison/Desktop/AutoParBench/benchmarks/ICC_Simd/dataracebench/DRB050-functionparameter-orig-yes.c(67,3)
<Remainder loop for vectorization>
   remark #15388: vectorization support: reference c[i] has aligned access   [ /home/gleison/Desktop/AutoParBench/benchmarks/ICC_Simd/dataracebench/DRB050-functionparameter-orig-yes.c(68,5) ]
   remark #15388: vectorization support: reference o1[i] has aligned access   [ /home/gleison/Desktop/AutoParBench/benchmarks/ICC_Simd/dataracebench/DRB050-functionparameter-orig-yes.c(69,5) ]
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 0.625
   remark #15301: REMAINDER LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 2 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 13 
   remark #15477: vector cost: 6.000 
   remark #15478: estimated potential speedup: 2.070 
   remark #15487: type converts: 2 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=2
LOOP END

LOOP BEGIN at /home/gleison/Desktop/AutoParBench/benchmarks/ICC_Simd/dataracebench/DRB050-functionparameter-orig-yes.c(74,3)
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15382: vectorization support: call to function printf(const char *__restrict__, ...) cannot be vectorized   [ /home/gleison/Desktop/AutoParBench/benchmarks/ICC_Simd/dataracebench/DRB050-functionparameter-orig-yes.c(75,5) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
LOOP END

LOOP BEGIN at /home/gleison/Desktop/AutoParBench/benchmarks/ICC_Simd/dataracebench/DRB050-functionparameter-orig-yes.c(67,3)
   remark #15389: vectorization support: reference at (68:5) has unaligned access   [ /home/gleison/Desktop/AutoParBench/benchmarks/ICC_Simd/dataracebench/DRB050-functionparameter-orig-yes.c(68,5) ]
   remark #15389: vectorization support: reference at (69:5) has unaligned access   [ /home/gleison/Desktop/AutoParBench/benchmarks/ICC_Simd/dataracebench/DRB050-functionparameter-orig-yes.c(69,5) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 2
   remark #15399: vectorization support: unroll factor set to 4
   remark #15309: vectorization support: normalized vectorization overhead 0.094
   remark #15300: LOOP WAS VECTORIZED
   remark #15451: unmasked unaligned unit stride stores: 2 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 13 
   remark #15477: vector cost: 8.000 
   remark #15478: estimated potential speedup: 1.570 
   remark #15487: type converts: 2 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=12
LOOP END

LOOP BEGIN at /home/gleison/Desktop/AutoParBench/benchmarks/ICC_Simd/dataracebench/DRB050-functionparameter-orig-yes.c(67,3)
<Remainder loop for vectorization>
   remark #15389: vectorization support: reference at (68:5) has unaligned access   [ /home/gleison/Desktop/AutoParBench/benchmarks/ICC_Simd/dataracebench/DRB050-functionparameter-orig-yes.c(68,5) ]
   remark #15389: vectorization support: reference at (69:5) has unaligned access   [ /home/gleison/Desktop/AutoParBench/benchmarks/ICC_Simd/dataracebench/DRB050-functionparameter-orig-yes.c(69,5) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 0.800
   remark #15451: unmasked unaligned unit stride stores: 2 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 13 
   remark #15477: vector cost: 8.000 
   remark #15478: estimated potential speedup: 1.570 
   remark #15487: type converts: 2 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=100
LOOP END

    Report from: Code generation optimizations [cg]

/home/gleison/Desktop/AutoParBench/benchmarks/ICC_Simd/dataracebench/DRB050-functionparameter-orig-yes.c(62,1):remark #34051: REGISTER ALLOCATION : [main] /home/gleison/Desktop/AutoParBench/benchmarks/ICC_Simd/dataracebench/DRB050-functionparameter-orig-yes.c:62

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   18[ rax rdx rcx rbx rsi rdi r8-r10 r12-r13 zmm0-zmm6]
        
    Routine temporaries
        Total         :     146
            Global    :      36
            Local     :     110
        Regenerable   :      54
        Spilled       :       0
        
    Routine stack
        Variables     :    1656 bytes*
            Reads     :       9 [2.97e+02 ~ 3.7%]
            Writes    :      19 [1.01e+03 ~ 12.7%]
        Spills        :      40 bytes*
            Reads     :      10 [5.00e+00 ~ 0.1%]
            Writes    :      10 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: foo1(double *, double *, int)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (foo1(double *, double *, int)) [3/3=100.0%] /home/gleison/Desktop/AutoParBench/benchmarks/ICC_Simd/dataracebench/DRB050-functionparameter-orig-yes.c(52,1)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /home/gleison/Desktop/AutoParBench/benchmarks/ICC_Simd/dataracebench/DRB050-functionparameter-orig-yes.c(55,3)
<Peeled loop for vectorization, Multiversioned v1>
   remark #25015: Estimate of max trip count of loop=1
LOOP END

LOOP BEGIN at /home/gleison/Desktop/AutoParBench/benchmarks/ICC_Simd/dataracebench/DRB050-functionparameter-orig-yes.c(55,3)
<Multiversioned v1>
   remark #25228: Loop multiversioned for Data Dependence
   remark #17109: LOOP WAS AUTO-PARALLELIZED
   remark #17101: parallel loop shared={ .2 } private={ } firstprivate={ len c o1 i } lastprivate={ } firstlastprivate={ } reduction={ }
   remark #15388: vectorization support: reference o1[i] has aligned access   [ /home/gleison/Desktop/AutoParBench/benchmarks/ICC_Simd/dataracebench/DRB050-functionparameter-orig-yes.c(57,5) ]
   remark #15388: vectorization support: reference c[i] has aligned access   [ /home/gleison/Desktop/AutoParBench/benchmarks/ICC_Simd/dataracebench/DRB050-functionparameter-orig-yes.c(56,30) ]
   remark #15305: vectorization support: vector length 2
   remark #15399: vectorization support: unroll factor set to 4
   remark #15309: vectorization support: normalized vectorization overhead 0.583
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 7 
   remark #15477: vector cost: 3.000 
   remark #15478: estimated potential speedup: 2.250 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at /home/gleison/Desktop/AutoParBench/benchmarks/ICC_Simd/dataracebench/DRB050-functionparameter-orig-yes.c(55,3)
<Alternate Alignment Vectorized Loop, Multiversioned v1>
LOOP END

LOOP BEGIN at /home/gleison/Desktop/AutoParBench/benchmarks/ICC_Simd/dataracebench/DRB050-functionparameter-orig-yes.c(55,3)
<Remainder loop for vectorization, Multiversioned v1>
LOOP END

LOOP BEGIN at /home/gleison/Desktop/AutoParBench/benchmarks/ICC_Simd/dataracebench/DRB050-functionparameter-orig-yes.c(55,3)
<Multiversioned v2>
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #17106: parallel dependence: assumed FLOW dependence between o1[i] (57:5) and c[i] (57:5)
   remark #17106: parallel dependence: assumed ANTI dependence between c[i] (57:5) and o1[i] (57:5)
   remark #15304: loop was not vectorized: non-vectorizable loop instance from multiversioning
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at /home/gleison/Desktop/AutoParBench/benchmarks/ICC_Simd/dataracebench/DRB050-functionparameter-orig-yes.c(55,3)
<Remainder, Multiversioned v2>
LOOP END

LOOP BEGIN at /home/gleison/Desktop/AutoParBench/benchmarks/ICC_Simd/dataracebench/DRB050-functionparameter-orig-yes.c(55,3)
<Peeled loop for vectorization, Multiversioned v1>
   remark #25015: Estimate of max trip count of loop=1
LOOP END

LOOP BEGIN at /home/gleison/Desktop/AutoParBench/benchmarks/ICC_Simd/dataracebench/DRB050-functionparameter-orig-yes.c(55,3)
<Multiversioned v1>
   remark #15388: vectorization support: reference o1[i] has aligned access   [ /home/gleison/Desktop/AutoParBench/benchmarks/ICC_Simd/dataracebench/DRB050-functionparameter-orig-yes.c(57,5) ]
   remark #15388: vectorization support: reference c[i] has aligned access   [ /home/gleison/Desktop/AutoParBench/benchmarks/ICC_Simd/dataracebench/DRB050-functionparameter-orig-yes.c(56,30) ]
   remark #15305: vectorization support: vector length 2
   remark #15399: vectorization support: unroll factor set to 4
   remark #15309: vectorization support: normalized vectorization overhead 0.583
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 7 
   remark #15477: vector cost: 3.000 
   remark #15478: estimated potential speedup: 2.250 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at /home/gleison/Desktop/AutoParBench/benchmarks/ICC_Simd/dataracebench/DRB050-functionparameter-orig-yes.c(55,3)
<Alternate Alignment Vectorized Loop, Multiversioned v1>
LOOP END

LOOP BEGIN at /home/gleison/Desktop/AutoParBench/benchmarks/ICC_Simd/dataracebench/DRB050-functionparameter-orig-yes.c(55,3)
<Remainder loop for vectorization, Multiversioned v1>
LOOP END

    Report from: Code generation optimizations [cg]

/home/gleison/Desktop/AutoParBench/benchmarks/ICC_Simd/dataracebench/DRB050-functionparameter-orig-yes.c(52,1):remark #34051: REGISTER ALLOCATION : [foo1] /home/gleison/Desktop/AutoParBench/benchmarks/ICC_Simd/dataracebench/DRB050-functionparameter-orig-yes.c:52

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   20[ rax rdx rcx rbx rbp rsi rdi r8-r15 zmm0-zmm4]
        
    Routine temporaries
        Total         :     172
            Global    :      49
            Local     :     123
        Regenerable   :      39
        Spilled       :       0
        
    Routine stack
        Variables     :      44 bytes*
            Reads     :       2 [5.00e+00 ~ 1.5%]
            Writes    :       9 [0.00e+00 ~ 0.0%]
        Spills        :      48 bytes*
            Reads     :      12 [6.00e+00 ~ 1.8%]
            Writes    :      12 [6.00e+00 ~ 1.8%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

    Report from: Interprocedural optimizations [ipo]

INLINING FOOTNOTES:

<1> Inlining the function will lead to incorrect program behavior.

