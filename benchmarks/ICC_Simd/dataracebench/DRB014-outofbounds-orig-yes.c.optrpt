Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.

Intel(R) C Intel(R) 64 Compiler for applications running on Intel(R) 64, Version 19.0.4.243 Build 20190416

Compiler options: -c -qopenmp -par-threshold0 -vec-threshold0 -fno-inline -parallel -qopt-report-phase=all -qopt-report=5 -o /home/gleison/Desktop/AutoParBench/benchmarks/ICC_Simd/dataracebench/DRB014-outofbounds-orig-yes.o

    Report from: Interprocedural optimizations [ipo]

  WHOLE PROGRAM (SAFE) [EITHER METHOD]: false
  WHOLE PROGRAM (SEEN) [TABLE METHOD]: false
  WHOLE PROGRAM (READ) [OBJECT READER METHOD]: false

INLINING OPTION VALUES:
  -inline-factor: 100
  -inline-min-size: 30
  -inline-max-size: 230
  -inline-max-total-size: 2000
  -inline-max-per-routine: 10000
  -inline-max-per-compile: 500000

In the inlining report below:
   "sz" refers to the "size" of the routine. The smaller a routine's size,
      the more likely it is to be inlined.
   "isz" refers to the "inlined size" of the routine. This is the amount
      the calling routine will grow if the called routine is inlined into it.
      The compiler generally limits the amount a routine can grow by having
      routines inlined into it.

Begin optimization report for: main(int, char **)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (main(int, char **)) [1/1=100.0%] /home/gleison/Desktop/AutoParBench/benchmarks/ICC_Simd/dataracebench/DRB014-outofbounds-orig-yes.c(69,1)
  -> EXTERN: (72,10) _vla_alloc(long)
  -> EXTERN: (82,3) _vla_free(void *, long)
  -> EXTERN: (82,3) printf(const char *__restrict__, ...)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /home/gleison/Desktop/AutoParBench/benchmarks/ICC_Simd/dataracebench/DRB014-outofbounds-orig-yes.c(74,3)
   remark #17109: LOOP WAS AUTO-PARALLELIZED
   remark #17101: parallel loop shared={ } private={ } firstprivate={ j b i } lastprivate={ } firstlastprivate={ } reduction={ }
   remark #15542: loop was not vectorized: inner loop was already vectorized
   remark #25015: Estimate of max trip count of loop=99

   LOOP BEGIN at /home/gleison/Desktop/AutoParBench/benchmarks/ICC_Simd/dataracebench/DRB014-outofbounds-orig-yes.c(75,5)
      remark #15388: vectorization support: reference b[i][j] has aligned access   [ /home/gleison/Desktop/AutoParBench/benchmarks/ICC_Simd/dataracebench/DRB014-outofbounds-orig-yes.c(76,7) ]
      remark #15305: vectorization support: vector length 4
      remark #15309: vectorization support: normalized vectorization overhead 0.250
      remark #15300: LOOP WAS VECTORIZED
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 5 
      remark #15477: vector cost: 3.000 
      remark #15478: estimated potential speedup: 1.650 
      remark #15487: type converts: 1 
      remark #15488: --- end vector cost summary ---
      remark #25015: Estimate of max trip count of loop=25
   LOOP END
LOOP END

LOOP BEGIN at /home/gleison/Desktop/AutoParBench/benchmarks/ICC_Simd/dataracebench/DRB014-outofbounds-orig-yes.c(78,3)
   remark #25420: Collapsed with loop at line 79 
   remark #25401: memcopy(with guard) generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #17106: parallel dependence: assumed ANTI dependence between b[i-1][j] (78:3) and b[i][j] (80:7)
   remark #17106: parallel dependence: assumed FLOW dependence between b[i][j] (80:7) and b[i-1][j] (78:3)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at /home/gleison/Desktop/AutoParBench/benchmarks/ICC_Simd/dataracebench/DRB014-outofbounds-orig-yes.c(78,3)
   <Multiversioned v2>
      remark #17104: loop was not parallelized: existence of parallel dependence
      remark #17106: parallel dependence: assumed FLOW dependence between b[i][j] (80:7) and b[i-1][j] (80:7)
      remark #17106: parallel dependence: assumed ANTI dependence between b[i-1][j] (80:7) and b[i][j] (80:7)
      remark #15304: loop was not vectorized: non-vectorizable loop instance from multiversioning
      remark #25438: unrolled without remainder by 2  
   LOOP END

   LOOP BEGIN at /home/gleison/Desktop/AutoParBench/benchmarks/ICC_Simd/dataracebench/DRB014-outofbounds-orig-yes.c(79,5)
      remark #25421: Loop eliminated in Collapsing 

   LOOP END
LOOP END

LOOP BEGIN at /home/gleison/Desktop/AutoParBench/benchmarks/ICC_Simd/dataracebench/DRB014-outofbounds-orig-yes.c(74,3)
   remark #15542: loop was not vectorized: inner loop was already vectorized
   remark #25015: Estimate of max trip count of loop=99

   LOOP BEGIN at /home/gleison/Desktop/AutoParBench/benchmarks/ICC_Simd/dataracebench/DRB014-outofbounds-orig-yes.c(75,5)
      remark #17107: loop was not parallelized: inner loop
      remark #15388: vectorization support: reference b[i][j] has aligned access   [ /home/gleison/Desktop/AutoParBench/benchmarks/ICC_Simd/dataracebench/DRB014-outofbounds-orig-yes.c(76,7) ]
      remark #15305: vectorization support: vector length 4
      remark #15309: vectorization support: normalized vectorization overhead 0.250
      remark #15300: LOOP WAS VECTORIZED
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 5 
      remark #15477: vector cost: 3.000 
      remark #15478: estimated potential speedup: 1.650 
      remark #15487: type converts: 1 
      remark #15488: --- end vector cost summary ---
      remark #25015: Estimate of max trip count of loop=25
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

/home/gleison/Desktop/AutoParBench/benchmarks/ICC_Simd/dataracebench/DRB014-outofbounds-orig-yes.c(78,3):remark #34014: optimization advice for memcpy: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
/home/gleison/Desktop/AutoParBench/benchmarks/ICC_Simd/dataracebench/DRB014-outofbounds-orig-yes.c(78,3):remark #34014: optimization advice for memcpy: increase the source's alignment to 16 (and use __assume_aligned) to speed up library implementation
/home/gleison/Desktop/AutoParBench/benchmarks/ICC_Simd/dataracebench/DRB014-outofbounds-orig-yes.c(78,3):remark #34026: call to memcpy implemented as a call to optimized library version
/home/gleison/Desktop/AutoParBench/benchmarks/ICC_Simd/dataracebench/DRB014-outofbounds-orig-yes.c(69,1):remark #34051: REGISTER ALLOCATION : [main] /home/gleison/Desktop/AutoParBench/benchmarks/ICC_Simd/dataracebench/DRB014-outofbounds-orig-yes.c:69

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   22[ rax rdx rcx rbx rsi rdi r8-r10 r12-r14 zmm0-zmm9]
        
    Routine temporaries
        Total         :     140
            Global    :      39
            Local     :     101
        Regenerable   :      54
        Spilled       :       0
        
    Routine stack
        Variables     :      36 bytes*
            Reads     :       4 [8.47e+00 ~ 0.8%]
            Writes    :       9 [0.00e+00 ~ 0.0%]
        Spills        :      40 bytes*
            Reads     :      10 [5.00e+00 ~ 0.5%]
            Writes    :      10 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================
