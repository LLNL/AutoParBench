Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.

Intel(R) C Intel(R) 64 Compiler for applications running on Intel(R) 64, Version 19.0.4.243 Build 20190416

Compiler options: -c -par-threshold0 -no-vec -fno-inline -parallel -qopt-report-phase=all -qopt-report=5 -o /home/gleison/Desktop/AutoParBench/benchmarks/ICC_Full/rodinia_3.1/openmp/b+tree/kernel/kernel_cpu_2.o

    Report from: Interprocedural optimizations [ipo]

  WHOLE PROGRAM (SAFE) [EITHER METHOD]: false
  WHOLE PROGRAM (SEEN) [TABLE METHOD]: false
  WHOLE PROGRAM (READ) [OBJECT READER METHOD]: false

INLINING OPTION VALUES:
  -inline-factor: 100
  -inline-min-size: 30
  -inline-max-size: 230
  -inline-max-total-size: 2000
  -inline-max-per-routine: 10000
  -inline-max-per-compile: 500000

In the inlining report below:
   "sz" refers to the "size" of the routine. The smaller a routine's size,
      the more likely it is to be inlined.
   "isz" refers to the "inlined size" of the routine. This is the amount
      the calling routine will grow if the called routine is inlined into it.
      The compiler generally limits the amount a routine can grow by having
      routines inlined into it.

Begin optimization report for: kernel_cpu_2(int, knode *, long, int, long, int, long *, long *, long *, long *, int *, int *, int *, int *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (kernel_cpu_2(int, knode *, long, int, long, int, long *, long *, long *, long *, int *, int *, int *, int *)) [1/1=100.0%] /home/gleison/Desktop/AutoParBench/benchmarks/ICC_Full/rodinia_3.1/openmp/b+tree/kernel/kernel_cpu_2.c(56,1)
  -> EXTERN: (70,10) get_time()
  -> EXTERN: (77,17) omp_get_max_threads(void)
  -> EXTERN: (79,2) omp_set_num_threads(int)
  -> EXTERN: (85,10) get_time()
  -> EXTERN: (151,10) get_time()
  -> EXTERN: (157,2) printf(const char *, ...)
  -> EXTERN: (159,2) printf(const char *, ...)
  -> EXTERN: (160,2) printf(const char *, ...)
  -> EXTERN: (162,2) printf(const char *, ...)
  -> EXTERN: (163,2) printf(const char *, ...)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /home/gleison/Desktop/AutoParBench/benchmarks/ICC_Full/rodinia_3.1/openmp/b+tree/kernel/kernel_cpu_2.c(96,2)
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #17106: parallel dependence: assumed FLOW dependence between offset[bid] (109:7) and lastKnode[bid] (144:5)
   remark #17106: parallel dependence: assumed ANTI dependence between lastKnode[bid] (144:5) and offset[bid] (109:7)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at /home/gleison/Desktop/AutoParBench/benchmarks/ICC_Full/rodinia_3.1/openmp/b+tree/kernel/kernel_cpu_2.c(99,3)
      remark #25096: Loop Interchange not done due to: Imperfect Loop Nest (Either at Source or due to other Compiler Transformations)
      remark #25451: Advice: Loop Interchange, if possible, might help loopnest. Suggested Permutation : ( 1 2 ) --> ( 2 1 ) 
      remark #17104: loop was not parallelized: existence of parallel dependence
      remark #17106: parallel dependence: assumed OUTPUT dependence between offset[bid] (109:7) and lastKnode[bid] (125:4)
      remark #17106: parallel dependence: assumed OUTPUT dependence between lastKnode[bid] (125:4) and offset[bid] (109:7)
      remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

      LOOP BEGIN at /home/gleison/Desktop/AutoParBench/benchmarks/ICC_Full/rodinia_3.1/openmp/b+tree/kernel/kernel_cpu_2.c(102,4)
         remark #17104: loop was not parallelized: existence of parallel dependence
         remark #17106: parallel dependence: assumed OUTPUT dependence between offset[bid] (109:7) and offset_2[bid] (117:7)
         remark #17106: parallel dependence: assumed OUTPUT dependence between offset_2[bid] (117:7) and offset[bid] (109:7)
         remark #15344: loop was not vectorized: vector dependence prevents vectorization
         remark #15346: vector dependence: assumed OUTPUT dependence between offset[bid] (109:7) and offset_2[bid] (117:7)
         remark #15346: vector dependence: assumed OUTPUT dependence between offset_2[bid] (117:7) and offset[bid] (109:7)
      LOOP END
   LOOP END

   LOOP BEGIN at /home/gleison/Desktop/AutoParBench/benchmarks/ICC_Full/rodinia_3.1/openmp/b+tree/kernel/kernel_cpu_2.c(130,3)
      remark #17104: loop was not parallelized: existence of parallel dependence
      remark #17106: parallel dependence: assumed FLOW dependence between recstart[bid] (134:5) and knodes->indices[currKnode[bid]][thid] (134:5)
      remark #17106: parallel dependence: assumed ANTI dependence between knodes->indices[currKnode[bid]][thid] (134:5) and recstart[bid] (134:5)
      remark #17106: parallel dependence: assumed OUTPUT dependence between recstart[bid] (134:5) and recstart[bid] (134:5)
      remark #17106: parallel dependence: assumed OUTPUT dependence between recstart[bid] (134:5) and recstart[bid] (134:5)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed FLOW dependence between recstart[bid] (134:5) and knodes->indices[currKnode[bid]][thid] (134:5)
      remark #15346: vector dependence: assumed ANTI dependence between knodes->indices[currKnode[bid]][thid] (134:5) and recstart[bid] (134:5)
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at /home/gleison/Desktop/AutoParBench/benchmarks/ICC_Full/rodinia_3.1/openmp/b+tree/kernel/kernel_cpu_2.c(130,3)
   <Remainder>
   LOOP END

   LOOP BEGIN at /home/gleison/Desktop/AutoParBench/benchmarks/ICC_Full/rodinia_3.1/openmp/b+tree/kernel/kernel_cpu_2.c(140,3)
      remark #17104: loop was not parallelized: existence of parallel dependence
      remark #17106: parallel dependence: assumed FLOW dependence between reclength[bid] (144:5) and knodes->indices[lastKnode[bid]][thid] (144:5)
      remark #17106: parallel dependence: assumed ANTI dependence between knodes->indices[lastKnode[bid]][thid] (144:5) and reclength[bid] (144:5)
      remark #17106: parallel dependence: assumed OUTPUT dependence between reclength[bid] (144:5) and reclength[bid] (144:5)
      remark #17106: parallel dependence: assumed OUTPUT dependence between reclength[bid] (144:5) and reclength[bid] (144:5)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed FLOW dependence between reclength[bid] (144:5) and knodes->indices[lastKnode[bid]][thid] (144:5)
      remark #15346: vector dependence: assumed ANTI dependence between knodes->indices[lastKnode[bid]][thid] (144:5) and reclength[bid] (144:5)
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at /home/gleison/Desktop/AutoParBench/benchmarks/ICC_Full/rodinia_3.1/openmp/b+tree/kernel/kernel_cpu_2.c(140,3)
   <Remainder>
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

/home/gleison/Desktop/AutoParBench/benchmarks/ICC_Full/rodinia_3.1/openmp/b+tree/kernel/kernel_cpu_2.c(56,1):remark #34051: REGISTER ALLOCATION : [kernel_cpu_2] /home/gleison/Desktop/AutoParBench/benchmarks/ICC_Full/rodinia_3.1/openmp/b+tree/kernel/kernel_cpu_2.c:56

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   19[ rax rdx rcx rbx rbp rsi rdi r8-r15 zmm0-zmm3]
        
    Routine temporaries
        Total         :     131
            Global    :      57
            Local     :      74
        Regenerable   :      30
        Spilled       :      17
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :      88 bytes*
            Reads     :      15 [1.03e+02 ~ 3.5%]
            Writes    :      13 [6.93e+01 ~ 2.4%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================
