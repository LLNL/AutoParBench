Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.

Intel(R) C Intel(R) 64 Compiler for applications running on Intel(R) 64, Version 19.0.4.243 Build 20190416

Compiler options: -c -par-threshold0 -no-vec -fno-inline -parallel -qopt-report-phase=all -qopt-report=5 -o /home/gleison/Desktop/AutoParBench/benchmarks/ICC_Full/dataracebench/utilities/template-for-new-benchmark.o

    Report from: Interprocedural optimizations [ipo]

  WHOLE PROGRAM (SAFE) [EITHER METHOD]: false
  WHOLE PROGRAM (SEEN) [TABLE METHOD]: false
  WHOLE PROGRAM (READ) [OBJECT READER METHOD]: false

INLINING OPTION VALUES:
  -inline-factor: 100
  -inline-min-size: 30
  -inline-max-size: 230
  -inline-max-total-size: 2000
  -inline-max-per-routine: 10000
  -inline-max-per-compile: 500000

In the inlining report below:
   "sz" refers to the "size" of the routine. The smaller a routine's size,
      the more likely it is to be inlined.
   "isz" refers to the "inlined size" of the routine. This is the amount
      the calling routine will grow if the called routine is inlined into it.
      The compiler generally limits the amount a routine can grow by having
      routines inlined into it.

Begin optimization report for: print_array(int, double (*)[1024])

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (print_array(int, double (*)[1024])) [1/4=25.0%] /home/gleison/Desktop/AutoParBench/benchmarks/ICC_Full/dataracebench/utilities/template-for-new-benchmark.c(37,1)
  -> EXTERN: (42,2) fprintf(FILE *__restrict__, const char *__restrict__, ...)
  -> EXTERN: (43,19) fprintf(FILE *__restrict__, const char *__restrict__, ...)
  -> EXTERN: (45,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /home/gleison/Desktop/AutoParBench/benchmarks/ICC_Full/dataracebench/utilities/template-for-new-benchmark.c(40,3)
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #17106: parallel dependence: assumed OUTPUT dependence between call:fprintf(FILE *__restrict__, const char *__restrict__, ...) (42:2) and call:fprintf(FILE *__restrict__, const char *__restrict__, ...) (43:19)
   remark #17106: parallel dependence: assumed OUTPUT dependence between call:fprintf(FILE *__restrict__, const char *__restrict__, ...) (43:19) and call:fprintf(FILE *__restrict__, const char *__restrict__, ...) (42:2)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at /home/gleison/Desktop/AutoParBench/benchmarks/ICC_Full/dataracebench/utilities/template-for-new-benchmark.c(41,5)
   <Predicate Optimized v1>
      remark #17104: loop was not parallelized: existence of parallel dependence
      remark #17106: parallel dependence: assumed OUTPUT dependence between call:fprintf(FILE *__restrict__, const char *__restrict__, ...) (42:2) and call:fprintf(FILE *__restrict__, const char *__restrict__, ...) (43:19)
      remark #17106: parallel dependence: assumed OUTPUT dependence between call:fprintf(FILE *__restrict__, const char *__restrict__, ...) (43:19) and call:fprintf(FILE *__restrict__, const char *__restrict__, ...) (42:2)
      remark #25422: Invariant Condition at line 43 hoisted out of this loop
      remark #15382: vectorization support: call to function fprintf(FILE *__restrict__, const char *__restrict__, ...) cannot be vectorized   [ /home/gleison/Desktop/AutoParBench/benchmarks/ICC_Full/dataracebench/utilities/template-for-new-benchmark.c(42,2) ]
      remark #15382: vectorization support: call to function fprintf(FILE *__restrict__, const char *__restrict__, ...) cannot be vectorized   [ /home/gleison/Desktop/AutoParBench/benchmarks/ICC_Full/dataracebench/utilities/template-for-new-benchmark.c(43,19) ]
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed OUTPUT dependence between call:fprintf(FILE *__restrict__, const char *__restrict__, ...) (42:2) and call:fprintf(FILE *__restrict__, const char *__restrict__, ...) (43:19)
      remark #15346: vector dependence: assumed OUTPUT dependence between call:fprintf(FILE *__restrict__, const char *__restrict__, ...) (43:19) and call:fprintf(FILE *__restrict__, const char *__restrict__, ...) (42:2)
      remark #25015: Estimate of max trip count of loop=1024
   LOOP END

   LOOP BEGIN at /home/gleison/Desktop/AutoParBench/benchmarks/ICC_Full/dataracebench/utilities/template-for-new-benchmark.c(41,5)
   <Predicate Optimized v2>
      remark #15382: vectorization support: call to function fprintf(FILE *__restrict__, const char *__restrict__, ...) cannot be vectorized   [ /home/gleison/Desktop/AutoParBench/benchmarks/ICC_Full/dataracebench/utilities/template-for-new-benchmark.c(42,2) ]
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed FLOW dependence between call:fprintf(FILE *__restrict__, const char *__restrict__, ...) (42:2) and C[i][j] (42:2)
      remark #15346: vector dependence: assumed ANTI dependence between C[i][j] (42:2) and call:fprintf(FILE *__restrict__, const char *__restrict__, ...) (42:2)
      remark #25015: Estimate of max trip count of loop=1024
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

/home/gleison/Desktop/AutoParBench/benchmarks/ICC_Full/dataracebench/utilities/template-for-new-benchmark.c(37,1):remark #34051: REGISTER ALLOCATION : [print_array] /home/gleison/Desktop/AutoParBench/benchmarks/ICC_Full/dataracebench/utilities/template-for-new-benchmark.c:37

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   12[ rax rdx rcx rbx rbp rsi rdi r8 r13-r15 zmm0]
        
    Routine temporaries
        Total         :      44
            Global    :      14
            Local     :      30
        Regenerable   :       9
        Spilled       :       5
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :      40 bytes*
            Reads     :       5 [4.50e+00 ~ 0.8%]
            Writes    :       5 [2.00e+00 ~ 0.4%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: kernel_template(int, double (*)[1024])

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (kernel_template(int, double (*)[1024])) [2/4=50.0%] /home/gleison/Desktop/AutoParBench/benchmarks/ICC_Full/dataracebench/utilities/template-for-new-benchmark.c(53,1)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /home/gleison/Desktop/AutoParBench/benchmarks/ICC_Full/dataracebench/utilities/template-for-new-benchmark.c(56,3)
   remark #17109: LOOP WAS AUTO-PARALLELIZED
   remark #17101: parallel loop shared={ .2 } private={ } firstprivate={ j C n i } lastprivate={ } firstlastprivate={ } reduction={ }
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at /home/gleison/Desktop/AutoParBench/benchmarks/ICC_Full/dataracebench/utilities/template-for-new-benchmark.c(57,5)
      remark #15540: loop was not vectorized: auto-vectorization is disabled with -no-vec flag
      remark #25439: unrolled with remainder by 8  
      remark #25015: Estimate of max trip count of loop=1024
   LOOP END

   LOOP BEGIN at /home/gleison/Desktop/AutoParBench/benchmarks/ICC_Full/dataracebench/utilities/template-for-new-benchmark.c(57,5)
   <Remainder>
      remark #25436: completely unrolled by 7  
   LOOP END
LOOP END

LOOP BEGIN at /home/gleison/Desktop/AutoParBench/benchmarks/ICC_Full/dataracebench/utilities/template-for-new-benchmark.c(56,3)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at /home/gleison/Desktop/AutoParBench/benchmarks/ICC_Full/dataracebench/utilities/template-for-new-benchmark.c(57,5)
      remark #17107: loop was not parallelized: inner loop
      remark #15540: loop was not vectorized: auto-vectorization is disabled with -no-vec flag
      remark #25439: unrolled with remainder by 8  
      remark #25015: Estimate of max trip count of loop=1024
   LOOP END

   LOOP BEGIN at /home/gleison/Desktop/AutoParBench/benchmarks/ICC_Full/dataracebench/utilities/template-for-new-benchmark.c(57,5)
   <Remainder>
      remark #25436: completely unrolled by 7  
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

/home/gleison/Desktop/AutoParBench/benchmarks/ICC_Full/dataracebench/utilities/template-for-new-benchmark.c(53,1):remark #34051: REGISTER ALLOCATION : [kernel_template] /home/gleison/Desktop/AutoParBench/benchmarks/ICC_Full/dataracebench/utilities/template-for-new-benchmark.c:53

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   24[ rax rdx rcx rbx rbp rsi rdi r8-r15 zmm0-zmm8]
        
    Routine temporaries
        Total         :     203
            Global    :      42
            Local     :     161
        Regenerable   :      37
        Spilled       :       0
        
    Routine stack
        Variables     :      40 bytes*
            Reads     :       2 [1.00e+01 ~ 2.4%]
            Writes    :       9 [0.00e+00 ~ 0.0%]
        Spills        :      48 bytes*
            Reads     :      12 [6.00e+00 ~ 1.5%]
            Writes    :      12 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: init_array(int, double (*)[1024])

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (init_array(int, double (*)[1024])) [3/4=75.0%] /home/gleison/Desktop/AutoParBench/benchmarks/ICC_Full/dataracebench/utilities/template-for-new-benchmark.c(25,1)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /home/gleison/Desktop/AutoParBench/benchmarks/ICC_Full/dataracebench/utilities/template-for-new-benchmark.c(27,3)
   remark #17109: LOOP WAS AUTO-PARALLELIZED
   remark #17101: parallel loop shared={ .2 } private={ } firstprivate={ j C n i } lastprivate={ } firstlastprivate={ } reduction={ }
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at /home/gleison/Desktop/AutoParBench/benchmarks/ICC_Full/dataracebench/utilities/template-for-new-benchmark.c(28,5)
      remark #15540: loop was not vectorized: auto-vectorization is disabled with -no-vec flag
      remark #25439: unrolled with remainder by 2  
      remark #25015: Estimate of max trip count of loop=1024
   LOOP END

   LOOP BEGIN at /home/gleison/Desktop/AutoParBench/benchmarks/ICC_Full/dataracebench/utilities/template-for-new-benchmark.c(28,5)
   <Remainder>
      remark #25015: Estimate of max trip count of loop=1024
   LOOP END
LOOP END

LOOP BEGIN at /home/gleison/Desktop/AutoParBench/benchmarks/ICC_Full/dataracebench/utilities/template-for-new-benchmark.c(27,3)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at /home/gleison/Desktop/AutoParBench/benchmarks/ICC_Full/dataracebench/utilities/template-for-new-benchmark.c(28,5)
      remark #17107: loop was not parallelized: inner loop
      remark #15540: loop was not vectorized: auto-vectorization is disabled with -no-vec flag
      remark #25439: unrolled with remainder by 2  
      remark #25015: Estimate of max trip count of loop=1024
   LOOP END

   LOOP BEGIN at /home/gleison/Desktop/AutoParBench/benchmarks/ICC_Full/dataracebench/utilities/template-for-new-benchmark.c(28,5)
   <Remainder>
      remark #25015: Estimate of max trip count of loop=1024
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

/home/gleison/Desktop/AutoParBench/benchmarks/ICC_Full/dataracebench/utilities/template-for-new-benchmark.c(25,1):remark #34051: REGISTER ALLOCATION : [init_array] /home/gleison/Desktop/AutoParBench/benchmarks/ICC_Full/dataracebench/utilities/template-for-new-benchmark.c:25

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   15[ rax rdx rcx rbx rbp rsi rdi r8-r15]
        
    Routine temporaries
        Total         :     109
            Global    :      40
            Local     :      69
        Regenerable   :      35
        Spilled       :       0
        
    Routine stack
        Variables     :      40 bytes*
            Reads     :       2 [1.00e+01 ~ 2.6%]
            Writes    :       9 [0.00e+00 ~ 0.0%]
        Spills        :      48 bytes*
            Reads     :      12 [6.00e+00 ~ 1.5%]
            Writes    :      12 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: main(int, char **)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (main(int, char **)) [4/4=100.0%] /home/gleison/Desktop/AutoParBench/benchmarks/ICC_Full/dataracebench/utilities/template-for-new-benchmark.c(63,1)
  -> EXTERN: (68,3) polybench_alloc_data(unsigned long long, int)
  -> (71,3) init_array(int, double (*)[1024]) (isz = 28) (sz = 35)
     [[ Unable to inline callsite  <1>]]
  -> (77,3) kernel_template(int, double (*)[1024]) (isz = 33) (sz = 40)
     [[ Unable to inline callsite  <1>]]
  -> (85,3) print_array(int, double (*)[1024]) (isz = 46) (sz = 53)
     [[ Unable to inline callsite  <1>]]
  -> EXTERN: (85,3) strcmp(const char *, const char *)
  -> EXTERN: (88,3) free(void *)


    Report from: Code generation optimizations [cg]

/home/gleison/Desktop/AutoParBench/benchmarks/ICC_Full/dataracebench/utilities/template-for-new-benchmark.c(63,1):remark #34051: REGISTER ALLOCATION : [main] /home/gleison/Desktop/AutoParBench/benchmarks/ICC_Full/dataracebench/utilities/template-for-new-benchmark.c:63

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    6[ rax rbx rsi rdi r12-r13]
        
    Routine temporaries
        Total         :      37
            Global    :      11
            Local     :      26
        Regenerable   :      17
        Spilled       :       3
        
    Routine stack
        Variables     :       4 bytes*
            Reads     :       2 [0.00e+00 ~ 0.0%]
            Writes    :       2 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

    Report from: Interprocedural optimizations [ipo]

INLINING FOOTNOTES:

<1> Inlining the function will lead to incorrect program behavior.

