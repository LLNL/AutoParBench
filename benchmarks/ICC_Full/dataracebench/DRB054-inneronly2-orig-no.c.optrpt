Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.

Intel(R) C Intel(R) 64 Compiler for applications running on Intel(R) 64, Version 19.0.4.243 Build 20190416

Compiler options: -c -qopenmp -par-threshold0 -no-vec -fno-inline -parallel -qopt-report-phase=all -qopt-report=5 -o /home/gleison/Desktop/AutoParBench/benchmarks/ICC_Full/dataracebench/DRB054-inneronly2-orig-no.o

    Report from: Interprocedural optimizations [ipo]

  WHOLE PROGRAM (SAFE) [EITHER METHOD]: false
  WHOLE PROGRAM (SEEN) [TABLE METHOD]: false
  WHOLE PROGRAM (READ) [OBJECT READER METHOD]: false

INLINING OPTION VALUES:
  -inline-factor: 100
  -inline-min-size: 30
  -inline-max-size: 230
  -inline-max-total-size: 2000
  -inline-max-per-routine: 10000
  -inline-max-per-compile: 500000

In the inlining report below:
   "sz" refers to the "size" of the routine. The smaller a routine's size,
      the more likely it is to be inlined.
   "isz" refers to the "inlined size" of the routine. This is the amount
      the calling routine will grow if the called routine is inlined into it.
      The compiler generally limits the amount a routine can grow by having
      routines inlined into it.

Begin optimization report for: main()

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (main()) [1/1=100.0%] /home/gleison/Desktop/AutoParBench/benchmarks/ICC_Full/dataracebench/DRB054-inneronly2-orig-no.c(52,1)
  -> EXTERN: (55,10) _vla_alloc(long)
  -> EXTERN: (67,7) printf(const char *, ...)
  -> EXTERN: (69,3) _vla_free(void *, long)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /home/gleison/Desktop/AutoParBench/benchmarks/ICC_Full/dataracebench/DRB054-inneronly2-orig-no.c(57,3)
   remark #17109: LOOP WAS AUTO-PARALLELIZED
   remark #17101: parallel loop shared={ } private={ } firstprivate={ j b i } lastprivate={ } firstlastprivate={ } reduction={ }
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive
   remark #25015: Estimate of max trip count of loop=100

   LOOP BEGIN at /home/gleison/Desktop/AutoParBench/benchmarks/ICC_Full/dataracebench/DRB054-inneronly2-orig-no.c(58,5)
      remark #15540: loop was not vectorized: auto-vectorization is disabled with -no-vec flag
      remark #25438: unrolled without remainder by 2  
      remark #25015: Estimate of max trip count of loop=100
   LOOP END
LOOP END

LOOP BEGIN at /home/gleison/Desktop/AutoParBench/benchmarks/ICC_Full/dataracebench/DRB054-inneronly2-orig-no.c(61,3)
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #17106: parallel dependence: assumed ANTI dependence between b[i-1][j-1] (62:5) and b[i][j] (62:5)
   remark #17106: parallel dependence: assumed FLOW dependence between b[i][j] (62:5) and b[i-1][j-1] (62:5)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at /home/gleison/Desktop/AutoParBench/benchmarks/ICC_Full/dataracebench/DRB054-inneronly2-orig-no.c(62,5)
      remark #25401: memcopy(with guard) generated
      remark #17104: loop was not parallelized: existence of parallel dependence
      remark #17106: parallel dependence: assumed ANTI dependence between b[i-1][j-1] (62:5) and b[i][j] (62:5)
      remark #17106: parallel dependence: assumed FLOW dependence between b[i][j] (62:5) and b[i-1][j-1] (62:5)
      remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

      LOOP BEGIN at /home/gleison/Desktop/AutoParBench/benchmarks/ICC_Full/dataracebench/DRB054-inneronly2-orig-no.c(62,5)
      <Multiversioned v2>
         remark #17109: LOOP WAS AUTO-PARALLELIZED
         remark #17101: parallel loop shared={ } private={ } firstprivate={ b j i } lastprivate={ } firstlastprivate={ } reduction={ }
         remark #15540: loop was not vectorized: auto-vectorization is disabled with -no-vec flag
         remark #25439: unrolled with remainder by 2  
         remark #25015: Estimate of max trip count of loop=99
      LOOP END

      LOOP BEGIN at /home/gleison/Desktop/AutoParBench/benchmarks/ICC_Full/dataracebench/DRB054-inneronly2-orig-no.c(62,5)
      <Remainder, Multiversioned v2>
         remark #25015: Estimate of max trip count of loop=99
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at /home/gleison/Desktop/AutoParBench/benchmarks/ICC_Full/dataracebench/DRB054-inneronly2-orig-no.c(65,3)
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #17106: parallel dependence: assumed OUTPUT dependence between call:printf(const char *, ...) (67:7) and call:printf(const char *, ...) (67:7)
   remark #17106: parallel dependence: assumed OUTPUT dependence between call:printf(const char *, ...) (67:7) and call:printf(const char *, ...) (67:7)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at /home/gleison/Desktop/AutoParBench/benchmarks/ICC_Full/dataracebench/DRB054-inneronly2-orig-no.c(66,5)
      remark #17104: loop was not parallelized: existence of parallel dependence
      remark #15382: vectorization support: call to function printf(const char *, ...) cannot be vectorized   [ /home/gleison/Desktop/AutoParBench/benchmarks/ICC_Full/dataracebench/DRB054-inneronly2-orig-no.c(67,7) ]
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
   LOOP END
LOOP END

LOOP BEGIN at /home/gleison/Desktop/AutoParBench/benchmarks/ICC_Full/dataracebench/DRB054-inneronly2-orig-no.c(57,3)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive
   remark #25015: Estimate of max trip count of loop=100

   LOOP BEGIN at /home/gleison/Desktop/AutoParBench/benchmarks/ICC_Full/dataracebench/DRB054-inneronly2-orig-no.c(58,5)
      remark #17107: loop was not parallelized: inner loop
      remark #15540: loop was not vectorized: auto-vectorization is disabled with -no-vec flag
      remark #25438: unrolled without remainder by 2  
      remark #25015: Estimate of max trip count of loop=100
   LOOP END
LOOP END

LOOP BEGIN at /home/gleison/Desktop/AutoParBench/benchmarks/ICC_Full/dataracebench/DRB054-inneronly2-orig-no.c(62,5)
<Multiversioned v2>
   remark #15540: loop was not vectorized: auto-vectorization is disabled with -no-vec flag
   remark #25439: unrolled with remainder by 2  
   remark #25015: Estimate of max trip count of loop=99
LOOP END

LOOP BEGIN at /home/gleison/Desktop/AutoParBench/benchmarks/ICC_Full/dataracebench/DRB054-inneronly2-orig-no.c(62,5)
<Remainder, Multiversioned v2>
   remark #25015: Estimate of max trip count of loop=99
LOOP END

    Report from: Code generation optimizations [cg]

/home/gleison/Desktop/AutoParBench/benchmarks/ICC_Full/dataracebench/DRB054-inneronly2-orig-no.c(62,5):remark #34014: optimization advice for memcpy: increase the source's alignment to 16 (and use __assume_aligned) to increase the width of loads
/home/gleison/Desktop/AutoParBench/benchmarks/ICC_Full/dataracebench/DRB054-inneronly2-orig-no.c(62,5):remark #34014: optimization advice for memcpy: increase the destination's alignment to 16 (and use __assume_aligned) to increase the width of stores
/home/gleison/Desktop/AutoParBench/benchmarks/ICC_Full/dataracebench/DRB054-inneronly2-orig-no.c(62,5):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (1, 0), and destination (alignment, offset): (1, 0)
/home/gleison/Desktop/AutoParBench/benchmarks/ICC_Full/dataracebench/DRB054-inneronly2-orig-no.c(52,1):remark #34051: REGISTER ALLOCATION : [main] /home/gleison/Desktop/AutoParBench/benchmarks/ICC_Full/dataracebench/DRB054-inneronly2-orig-no.c:52

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   21[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm6]
        
    Routine temporaries
        Total         :     228
            Global    :      63
            Local     :     165
        Regenerable   :      79
        Spilled       :       2
        
    Routine stack
        Variables     :      76 bytes*
            Reads     :       6 [5.55e+01 ~ 3.4%]
            Writes    :      18 [0.00e+00 ~ 0.0%]
        Spills        :      56 bytes*
            Reads     :      17 [5.40e+00 ~ 0.3%]
            Writes    :      17 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================
