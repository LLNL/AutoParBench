Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.

Intel(R) C Intel(R) 64 Compiler for applications running on Intel(R) 64, Version 19.0.4.243 Build 20190416

Compiler options: -c -qopenmp -par-threshold0 -no-vec -fno-inline -parallel -qopt-report-phase=all -qopt-report=5 -o /home/gleison/Desktop/AutoParBench/benchmarks/ICC_Full/dataracebench/DRB055-jacobi2d-parallel-no.o

    Report from: Interprocedural optimizations [ipo]

  WHOLE PROGRAM (SAFE) [EITHER METHOD]: false
  WHOLE PROGRAM (SEEN) [TABLE METHOD]: false
  WHOLE PROGRAM (READ) [OBJECT READER METHOD]: false

INLINING OPTION VALUES:
  -inline-factor: 100
  -inline-min-size: 30
  -inline-max-size: 230
  -inline-max-total-size: 2000
  -inline-max-per-routine: 10000
  -inline-max-per-compile: 500000

In the inlining report below:
   "sz" refers to the "size" of the routine. The smaller a routine's size,
      the more likely it is to be inlined.
   "isz" refers to the "inlined size" of the routine. This is the amount
      the calling routine will grow if the called routine is inlined into it.
      The compiler generally limits the amount a routine can grow by having
      routines inlined into it.

Begin optimization report for: print_array(int, double (*)[500])

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (print_array(int, double (*)[500])) [1/4=25.0%] /home/gleison/Desktop/AutoParBench/benchmarks/ICC_Full/dataracebench/DRB055-jacobi2d-parallel-no.c(41,1)
  -> EXTERN: (46,7) fprintf(FILE *__restrict__, const char *__restrict__, ...)
  -> EXTERN: (48,9) fprintf(FILE *__restrict__, const char *__restrict__, ...)
  -> EXTERN: (50,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /home/gleison/Desktop/AutoParBench/benchmarks/ICC_Full/dataracebench/DRB055-jacobi2d-parallel-no.c(44,3)
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #17106: parallel dependence: assumed OUTPUT dependence between call:fprintf(FILE *__restrict__, const char *__restrict__, ...) (46:7) and call:fprintf(FILE *__restrict__, const char *__restrict__, ...) (48:9)
   remark #17106: parallel dependence: assumed OUTPUT dependence between call:fprintf(FILE *__restrict__, const char *__restrict__, ...) (48:9) and call:fprintf(FILE *__restrict__, const char *__restrict__, ...) (46:7)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at /home/gleison/Desktop/AutoParBench/benchmarks/ICC_Full/dataracebench/DRB055-jacobi2d-parallel-no.c(45,5)
      remark #17104: loop was not parallelized: existence of parallel dependence
      remark #17106: parallel dependence: assumed OUTPUT dependence between call:fprintf(FILE *__restrict__, const char *__restrict__, ...) (46:7) and call:fprintf(FILE *__restrict__, const char *__restrict__, ...) (48:9)
      remark #17106: parallel dependence: assumed OUTPUT dependence between call:fprintf(FILE *__restrict__, const char *__restrict__, ...) (48:9) and call:fprintf(FILE *__restrict__, const char *__restrict__, ...) (46:7)
      remark #15382: vectorization support: call to function fprintf(FILE *__restrict__, const char *__restrict__, ...) cannot be vectorized   [ /home/gleison/Desktop/AutoParBench/benchmarks/ICC_Full/dataracebench/DRB055-jacobi2d-parallel-no.c(46,7) ]
      remark #15382: vectorization support: call to function fprintf(FILE *__restrict__, const char *__restrict__, ...) cannot be vectorized   [ /home/gleison/Desktop/AutoParBench/benchmarks/ICC_Full/dataracebench/DRB055-jacobi2d-parallel-no.c(48,9) ]
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed OUTPUT dependence between call:fprintf(FILE *__restrict__, const char *__restrict__, ...) (46:7) and call:fprintf(FILE *__restrict__, const char *__restrict__, ...) (48:9)
      remark #15346: vector dependence: assumed OUTPUT dependence between call:fprintf(FILE *__restrict__, const char *__restrict__, ...) (48:9) and call:fprintf(FILE *__restrict__, const char *__restrict__, ...) (46:7)
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

/home/gleison/Desktop/AutoParBench/benchmarks/ICC_Full/dataracebench/DRB055-jacobi2d-parallel-no.c(41,1):remark #34051: REGISTER ALLOCATION : [print_array] /home/gleison/Desktop/AutoParBench/benchmarks/ICC_Full/dataracebench/DRB055-jacobi2d-parallel-no.c:41

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   12[ rax rdx rcx rbx rbp rsi rdi r12-r15 zmm0]
        
    Routine temporaries
        Total         :      38
            Global    :      15
            Local     :      23
        Regenerable   :       8
        Spilled       :       6
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: kernel_jacobi_2d_imper(int, int, double (*)[500], double (*)[500])

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (kernel_jacobi_2d_imper(int, int, double (*)[500], double (*)[500])) [2/4=50.0%] /home/gleison/Desktop/AutoParBench/benchmarks/ICC_Full/dataracebench/DRB055-jacobi2d-parallel-no.c(56,1)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /home/gleison/Desktop/AutoParBench/benchmarks/ICC_Full/dataracebench/DRB055-jacobi2d-parallel-no.c(66,5)
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #17106: parallel dependence: assumed FLOW dependence between B[1][c2] (67:7) and A[1][c2] (67:7)
   remark #17106: parallel dependence: assumed ANTI dependence between A[1][c2] (67:7) and B[1][c2] (67:7)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between B[1][c2] (67:7) and A[1][c2] (67:7)
   remark #15346: vector dependence: assumed ANTI dependence between A[1][c2] (67:7) and B[1][c2] (67:7)
   remark #25439: unrolled with remainder by 4  
LOOP END

LOOP BEGIN at /home/gleison/Desktop/AutoParBench/benchmarks/ICC_Full/dataracebench/DRB055-jacobi2d-parallel-no.c(66,5)
<Remainder>
LOOP END

LOOP BEGIN at /home/gleison/Desktop/AutoParBench/benchmarks/ICC_Full/dataracebench/DRB055-jacobi2d-parallel-no.c(69,5)
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #17106: parallel dependence: assumed OUTPUT dependence between B[1][(c0*-2+c2*3+2)/3] (73:13) and A[498][(c0*-2+c2*3+995)/3] (88:13)
   remark #17106: parallel dependence: assumed OUTPUT dependence between A[498][(c0*-2+c2*3+995)/3] (88:13) and B[1][(c0*-2+c2*3+2)/3] (73:13)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at /home/gleison/Desktop/AutoParBench/benchmarks/ICC_Full/dataracebench/DRB055-jacobi2d-parallel-no.c(72,274)
      remark #17102: loop was not parallelized: not a parallelization candidate
      remark #15522: loop was not vectorized: loop control flow is too complex. Try using canonical loop form from OpenMP specification
   LOOP END

   LOOP BEGIN at /home/gleison/Desktop/AutoParBench/benchmarks/ICC_Full/dataracebench/DRB055-jacobi2d-parallel-no.c(77,547)
      remark #17102: loop was not parallelized: not a parallelization candidate
      remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

      LOOP BEGIN at /home/gleison/Desktop/AutoParBench/benchmarks/ICC_Full/dataracebench/DRB055-jacobi2d-parallel-no.c(79,9)
         remark #17104: loop was not parallelized: existence of parallel dependence
         remark #17106: parallel dependence: assumed OUTPUT dependence between A[c0*-2+c1*3-1][c0*-2+c1*2+c2-1] (80:11) and B[c0*-2+c1*3][c0*-2+c1*2+c2] (81:11)
         remark #17106: parallel dependence: assumed OUTPUT dependence between B[c0*-2+c1*3][c0*-2+c1*2+c2] (81:11) and A[c0*-2+c1*3-1][c0*-2+c1*2+c2-1] (80:11)
         remark #15344: loop was not vectorized: vector dependence prevents vectorization
         remark #15346: vector dependence: assumed OUTPUT dependence between A[c0*-2+c1*3-1][c0*-2+c1*2+c2-1] (80:11) and B[c0*-2+c1*3][c0*-2+c1*2+c2] (81:11)
         remark #15346: vector dependence: assumed OUTPUT dependence between B[c0*-2+c1*3][c0*-2+c1*2+c2] (81:11) and A[c0*-2+c1*3-1][c0*-2+c1*2+c2-1] (80:11)
      LOOP END
   LOOP END

   LOOP BEGIN at /home/gleison/Desktop/AutoParBench/benchmarks/ICC_Full/dataracebench/DRB055-jacobi2d-parallel-no.c(87,282)
      remark #17102: loop was not parallelized: not a parallelization candidate
      remark #15522: loop was not vectorized: loop control flow is too complex. Try using canonical loop form from OpenMP specification
   LOOP END
LOOP END

LOOP BEGIN at /home/gleison/Desktop/AutoParBench/benchmarks/ICC_Full/dataracebench/DRB055-jacobi2d-parallel-no.c(93,5)
   remark #25401: memcopy(with guard) generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #17106: parallel dependence: assumed ANTI dependence between B[498][c2-19] (93:5) and A[498][c2-19] (94:7)
   remark #17106: parallel dependence: assumed FLOW dependence between A[498][c2-19] (94:7) and B[498][c2-19] (93:5)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at /home/gleison/Desktop/AutoParBench/benchmarks/ICC_Full/dataracebench/DRB055-jacobi2d-parallel-no.c(93,5)
   <Multiversioned v2>
      remark #17104: loop was not parallelized: existence of parallel dependence
      remark #17106: parallel dependence: assumed FLOW dependence between A[498][c2-19] (94:7) and B[498][c2-19] (94:7)
      remark #17106: parallel dependence: assumed ANTI dependence between B[498][c2-19] (94:7) and A[498][c2-19] (94:7)
      remark #15304: loop was not vectorized: non-vectorizable loop instance from multiversioning
      remark #25438: unrolled without remainder by 2  
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

/home/gleison/Desktop/AutoParBench/benchmarks/ICC_Full/dataracebench/DRB055-jacobi2d-parallel-no.c(93,5):remark #34014: optimization advice for memcpy: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
/home/gleison/Desktop/AutoParBench/benchmarks/ICC_Full/dataracebench/DRB055-jacobi2d-parallel-no.c(93,5):remark #34014: optimization advice for memcpy: increase the source's alignment to 16 (and use __assume_aligned) to speed up library implementation
/home/gleison/Desktop/AutoParBench/benchmarks/ICC_Full/dataracebench/DRB055-jacobi2d-parallel-no.c(93,5):remark #34026: call to memcpy implemented as a call to optimized library version
/home/gleison/Desktop/AutoParBench/benchmarks/ICC_Full/dataracebench/DRB055-jacobi2d-parallel-no.c(56,1):remark #34051: REGISTER ALLOCATION : [kernel_jacobi_2d_imper] /home/gleison/Desktop/AutoParBench/benchmarks/ICC_Full/dataracebench/DRB055-jacobi2d-parallel-no.c:56

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   20[ rax rdx rcx rbx rbp rsi rdi r8-r15 zmm0-zmm4]
        
    Routine temporaries
        Total         :     241
            Global    :      42
            Local     :     199
        Regenerable   :      22
        Spilled       :      11
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :      40 bytes*
            Reads     :       5 [4.42e+03 ~ 3.0%]
            Writes    :       5 [2.33e+03 ~ 1.6%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: init_array(int, double (*)[500], double (*)[500])

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (init_array(int, double (*)[500], double (*)[500])) [3/4=75.0%] /home/gleison/Desktop/AutoParBench/benchmarks/ICC_Full/dataracebench/DRB055-jacobi2d-parallel-no.c(21,1)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /home/gleison/Desktop/AutoParBench/benchmarks/ICC_Full/dataracebench/DRB055-jacobi2d-parallel-no.c(28,7)
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #17106: parallel dependence: assumed OUTPUT dependence between A[c1][c2] (30:11) and B[c1][c2] (31:11)
   remark #17106: parallel dependence: assumed OUTPUT dependence between B[c1][c2] (31:11) and A[c1][c2] (30:11)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at /home/gleison/Desktop/AutoParBench/benchmarks/ICC_Full/dataracebench/DRB055-jacobi2d-parallel-no.c(29,9)
   <Multiversioned v1>
      remark #25228: Loop multiversioned for Data Dependence
      remark #17109: LOOP WAS AUTO-PARALLELIZED
      remark #17101: parallel loop shared={ } private={ } firstprivate={ A B c2 c1 } lastprivate={ } firstlastprivate={ } reduction={ }
      remark #15540: loop was not vectorized: auto-vectorization is disabled with -no-vec flag
      remark #25015: Estimate of max trip count of loop=500
   LOOP END

   LOOP BEGIN at /home/gleison/Desktop/AutoParBench/benchmarks/ICC_Full/dataracebench/DRB055-jacobi2d-parallel-no.c(29,9)
   <Multiversioned v2>
      remark #17104: loop was not parallelized: existence of parallel dependence
      remark #17106: parallel dependence: assumed OUTPUT dependence between A[c1][c2] (30:11) and B[c1][c2] (31:11)
      remark #17106: parallel dependence: assumed OUTPUT dependence between B[c1][c2] (31:11) and A[c1][c2] (30:11)
      remark #15304: loop was not vectorized: non-vectorizable loop instance from multiversioning
      remark #25015: Estimate of max trip count of loop=500
   LOOP END
LOOP END

LOOP BEGIN at /home/gleison/Desktop/AutoParBench/benchmarks/ICC_Full/dataracebench/DRB055-jacobi2d-parallel-no.c(29,9)
<Multiversioned v1>
   remark #15540: loop was not vectorized: auto-vectorization is disabled with -no-vec flag
   remark #25015: Estimate of max trip count of loop=500
LOOP END

    Report from: Code generation optimizations [cg]

/home/gleison/Desktop/AutoParBench/benchmarks/ICC_Full/dataracebench/DRB055-jacobi2d-parallel-no.c(21,1):remark #34051: REGISTER ALLOCATION : [init_array] /home/gleison/Desktop/AutoParBench/benchmarks/ICC_Full/dataracebench/DRB055-jacobi2d-parallel-no.c:21

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   21[ rax rdx rcx rbx rbp rsi rdi r8-r15 zmm0-zmm5]
        
    Routine temporaries
        Total         :     141
            Global    :      40
            Local     :     101
        Regenerable   :      37
        Spilled       :       0
        
    Routine stack
        Variables     :      44 bytes*
            Reads     :       2 [1.25e+01 ~ 2.6%]
            Writes    :       9 [0.00e+00 ~ 0.0%]
        Spills        :      48 bytes*
            Reads     :      12 [6.00e+00 ~ 1.2%]
            Writes    :      12 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: main(int, char **)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (main(int, char **)) [4/4=100.0%] /home/gleison/Desktop/AutoParBench/benchmarks/ICC_Full/dataracebench/DRB055-jacobi2d-parallel-no.c(102,1)
  -> EXTERN: (108,39) polybench_alloc_data(unsigned long long, int)
  -> EXTERN: (111,39) polybench_alloc_data(unsigned long long, int)
  -> (114,3) init_array(int, double (*)[500], double (*)[500]) (isz = 50) (sz = 59)
     [[ Unable to inline callsite  <1>]]
  -> EXTERN: (116,3) polybench_timer_start()
  -> (119,3) kernel_jacobi_2d_imper(int, int, double (*)[500], double (*)[500]) (isz = 485) (sz = 496)
     [[ Unable to inline callsite  <1>]]
  -> EXTERN: (121,3) polybench_timer_stop()
  -> EXTERN: (123,3) polybench_timer_print()
  -> (127,3) print_array(int, double (*)[500]) (isz = 48) (sz = 55)
     [[ Unable to inline callsite  <1>]]
  -> EXTERN: (129,3) free(void *)
  -> EXTERN: (131,3) free(void *)


    Report from: Code generation optimizations [cg]

/home/gleison/Desktop/AutoParBench/benchmarks/ICC_Full/dataracebench/DRB055-jacobi2d-parallel-no.c(102,1):remark #34051: REGISTER ALLOCATION : [main] /home/gleison/Desktop/AutoParBench/benchmarks/ICC_Full/dataracebench/DRB055-jacobi2d-parallel-no.c:102

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    7[ rax rdx rcx rbx rsi rdi r12]
        
    Routine temporaries
        Total         :      40
            Global    :      10
            Local     :      30
        Regenerable   :      21
        Spilled       :       2
        
    Routine stack
        Variables     :       4 bytes*
            Reads     :       2 [0.00e+00 ~ 0.0%]
            Writes    :       2 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

    Report from: Interprocedural optimizations [ipo]

INLINING FOOTNOTES:

<1> Inlining the function will lead to incorrect program behavior.

