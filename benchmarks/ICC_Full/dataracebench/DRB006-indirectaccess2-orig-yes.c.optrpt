Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.

Intel(R) C Intel(R) 64 Compiler for applications running on Intel(R) 64, Version 19.0.4.243 Build 20190416

Compiler options: -c -qopenmp -par-threshold0 -no-vec -fno-inline -parallel -qopt-report-phase=all -qopt-report=5 -o /home/gleison/Desktop/AutoParBench/benchmarks/ICC_Full/dataracebench/DRB006-indirectaccess2-orig-yes.o

    Report from: Interprocedural optimizations [ipo]

  WHOLE PROGRAM (SAFE) [EITHER METHOD]: false
  WHOLE PROGRAM (SEEN) [TABLE METHOD]: false
  WHOLE PROGRAM (READ) [OBJECT READER METHOD]: false

INLINING OPTION VALUES:
  -inline-factor: 100
  -inline-min-size: 30
  -inline-max-size: 230
  -inline-max-total-size: 2000
  -inline-max-per-routine: 10000
  -inline-max-per-compile: 500000

In the inlining report below:
   "sz" refers to the "size" of the routine. The smaller a routine's size,
      the more likely it is to be inlined.
   "isz" refers to the "inlined size" of the routine. This is the amount
      the calling routine will grow if the called routine is inlined into it.
      The compiler generally limits the amount a routine can grow by having
      routines inlined into it.

Begin optimization report for: main(int, char **)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (main(int, char **)) [1/1=100.0%] /home/gleison/Desktop/AutoParBench/benchmarks/ICC_Full/dataracebench/DRB006-indirectaccess2-orig-yes.c(106,1)
  -> EXTERN: (107,28) malloc(size_t)
  -> EXTERN: (108,28) malloc(size_t)
  -> EXTERN: (112,5) printf(const char *__restrict__, ...)
  -> EXTERN: (130,3) printf(const char *__restrict__, ...)
  -> EXTERN: (131,3) free(void *)
  -> EXTERN: (132,3) free(void *)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /home/gleison/Desktop/AutoParBench/benchmarks/ICC_Full/dataracebench/DRB006-indirectaccess2-orig-yes.c(118,3)
   remark #17109: LOOP WAS AUTO-PARALLELIZED
   remark #17101: parallel loop shared={ } private={ } firstprivate={ xa1 xa2 i } lastprivate={ } firstlastprivate={ } reduction={ }
   remark #15540: loop was not vectorized: auto-vectorization is disabled with -no-vec flag
   remark #25439: unrolled with remainder by 2  
   remark #25015: Estimate of max trip count of loop=1505
LOOP END

LOOP BEGIN at /home/gleison/Desktop/AutoParBench/benchmarks/ICC_Full/dataracebench/DRB006-indirectaccess2-orig-yes.c(118,3)
<Remainder>
   remark #25015: Estimate of max trip count of loop=1505
LOOP END

LOOP BEGIN at /home/gleison/Desktop/AutoParBench/benchmarks/ICC_Full/dataracebench/DRB006-indirectaccess2-orig-yes.c(124,3)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between xa1[idx] (127:5) and xa1[idx] (127:5)
   remark #15346: vector dependence: assumed ANTI dependence between xa1[idx] (127:5) and xa1[idx] (127:5)
   remark #25438: unrolled without remainder by 2  
LOOP END

LOOP BEGIN at /home/gleison/Desktop/AutoParBench/benchmarks/ICC_Full/dataracebench/DRB006-indirectaccess2-orig-yes.c(118,3)
   remark #15540: loop was not vectorized: auto-vectorization is disabled with -no-vec flag
   remark #25439: unrolled with remainder by 2  
   remark #25015: Estimate of max trip count of loop=1505
LOOP END

LOOP BEGIN at /home/gleison/Desktop/AutoParBench/benchmarks/ICC_Full/dataracebench/DRB006-indirectaccess2-orig-yes.c(118,3)
<Remainder>
   remark #25015: Estimate of max trip count of loop=1505
LOOP END

    Report from: Code generation optimizations [cg]

/home/gleison/Desktop/AutoParBench/benchmarks/ICC_Full/dataracebench/DRB006-indirectaccess2-orig-yes.c(106,1):remark #34051: REGISTER ALLOCATION : [main] /home/gleison/Desktop/AutoParBench/benchmarks/ICC_Full/dataracebench/DRB006-indirectaccess2-orig-yes.c:106

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   20[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm5]
        
    Routine temporaries
        Total         :     159
            Global    :      34
            Local     :     125
        Regenerable   :      60
        Spilled       :       1
        
    Routine stack
        Variables     :      40 bytes*
            Reads     :       4 [2.82e+03 ~ 6.4%]
            Writes    :       9 [0.00e+00 ~ 0.0%]
        Spills        :      48 bytes*
            Reads     :      16 [5.00e+00 ~ 0.0%]
            Writes    :      11 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================
